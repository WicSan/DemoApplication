# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master
- feature/*
- release/*

pool:
  name: 'Self-Hosted'

variables:
  ImageName: 'demo-application'
  BuildConfiguration: 'release'
  Dockertag: ''

stages:
- stage: Setup
  displayName: 'Setup & Run GitVersion'
  jobs:
    - job: GitVersion
      steps:
      - task: gitversion/setup@0
        displayName: Install GitVersion
        inputs:
          versionSpec: '5.x'

      - task: gitversion/execute@0
        displayName: Determine Version
        name: Versioning

      - bash: |
          fullSemVer = $(GitVersion.FullSemVer)
          echo '##vso[task.setvariable variable=Dockertag]${fullSemVer//+/"_"}'
        displayName: Set Dockertag
      
      - task: Bash@3
        displayName: Print environment
        inputs:
          targetType: 'inline'
          script: env | sort

- stage: Build
  displayName: 'Build & Test'
  jobs:
  - job: Build
    steps:
    - checkout: none
    - task: DotNetCoreCLI@2
      displayName: DotNet restore
      inputs:
        command: 'restore'
        projects: 'DemoApplication'
        feedsToUse: 'select'

    - task: Npm@1
      displayName: 'Npm install'
      inputs:
        command: 'install'
        workingDir: 'DemoApplication/ClientApp'

    - task: Npm@1
      displayName: 'Npm build'
      inputs:
        command: 'custom'
        workingDir: 'DemoApplication/ClientApp'
        customCommand: 'run build'

    - task: DotNetCoreCLI@2
      displayName: DotNet build
      inputs:
        command: 'build'
        projects: 'DemoApplication/*.csproj'
        arguments: '--no-restore --configuration $(BuildConfiguration)'
        workingDirectory: 'DemoApplication/'

  - job: Test
    dependsOn: Build
    steps:
    - checkout: none
    - task: DotNetCoreCLI@2
      displayName: DotNet test
      inputs:
        command: 'test'
        arguments: '--no-restore'
        projects: 'DemoApplication.Tests/*.csproj'
    
  - job: Publish
    dependsOn: Build
    steps:
    - checkout: none
    - task: DotNetCoreCLI@2
      displayName: DotNet publish
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: 'DemoApplication/*.csproj'
        arguments: '--no-restore --configuration $(BuildConfiguration) -o $(Build.BinariesDirectory)/publish'
        zipAfterPublish: false
        modifyOutputPath: false

    - task: CopyFiles@2
      displayName: 'Publish frontend'
      inputs:
        SourceFolder: 'DemoApplication/ClientApp/build'
        Contents: '**'
        TargetFolder: '$(Build.BinariesDirectory)/publish/wwwroot'
        CleanTargetFolder: true

    - task: Docker@2
      displayName: Docker build and publish
      inputs:
        containerRegistry: 'Local docker registry'
        repository: '$(ImageName)'
        command: 'buildAndPush'
        Dockerfile: 'DemoApplication/Dockerfile'
        buildContext: '$(Build.BinariesDirectory)'
        tags: '$(Dockertag)'

- stage: Release
  displayName: 'Create & Push helm package to octopus'
  jobs:
  - job: CreateAndPushRelease
    steps:
    - checkout: none
    - task: HelmDeploy@0
      displayName: Helm package
      inputs:
        command: 'package'
        chartPath: 'deployment/helm/demo-application'
        chartVersion: '$(Build.BuildNumber)'
        destination: '$(Build.BinariesDirectory)/helm/charts'
        arguments: '--app-version $(Dockertag)'

    - task: OctopusPush@4
      displayName: Ocotopus push
      inputs:
        OctoConnectedServiceName: 'Local octopus server'
        Space: 'Spaces-1'
        Package: '$(Build.BinariesDirectory)/helm/charts/*.tgz'
        Replace: 'true'

    - task: OctopusCreateRelease@4
      displayName: Create Master release
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
      inputs:
        OctoConnectedServiceName: 'Local octopus server'
        Space: 'Spaces-1'
        ProjectGroup: 'ProjectGroups-1'
        ProjectName: 'Projects-1'
        ReleaseNumber: '$(Build.BuildNumber)'
        Channel: 'Channels-1'
        
    - task: OctopusCreateRelease@4
      displayName: Create Feature release
      condition: not(eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      inputs:
        OctoConnectedServiceName: 'Local octopus server'
        Space: 'Spaces-1'
        ProjectGroup: 'ProjectGroups-1'
        ProjectName: 'Projects-1'
        ReleaseNumber: '$(Build.BuildNumber)'
        Channel: 'Channels-21'
        AdditionalArguments: '--packageVersion $(Build.BuildNumber)'